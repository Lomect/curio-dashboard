package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.55

import (
	"context"
	"time"

	"github.com/strahe/curio-dashboard/graph"
	"github.com/strahe/curio-dashboard/graph/cachecontrol"
	"github.com/strahe/curio-dashboard/graph/model"
)

// NetworkName is the resolver for the networkName field.
func (r *globalResolver) NetworkName(ctx context.Context, obj *model.Global) (string, error) {
	cachecontrol.SetHint(ctx, cachecontrol.ScopePrivate, time.Hour)
	n, err := r.fullNode.StateNetworkName(ctx)
	if err != nil {
		return "", err
	}
	return string(n), nil
}

// GenesisTimestamp is the resolver for the genesisTimestamp field.
func (r *globalResolver) GenesisTimestamp(ctx context.Context, obj *model.Global) (int, error) {
	g, err := r.fullNode.ChainGetGenesis(ctx)
	if err != nil {
		return 0, err
	}
	return int(g.MinTimestamp()), nil
}

// Global returns graph.GlobalResolver implementation.
func (r *Resolver) Global() graph.GlobalResolver { return &globalResolver{r} }

type globalResolver struct{ *Resolver }
