package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.55

import (
	"context"
	"fmt"

	"github.com/strahe/curio-dashboard/graph"
	"github.com/strahe/curio-dashboard/graph/model"
)

// ID is the resolver for the id field.
func (r *porepResolver) ID(ctx context.Context, obj *model.Porep) (string, error) {
	return fmt.Sprintf("%s-%d", obj.SpID, obj.SectorNumber), nil
}

// Status is the resolver for the status field.
func (r *porepResolver) Status(ctx context.Context, obj *model.Porep) (model.PorepStatus, error) {
	if obj.Failed {
		return model.PorepStatusFailed, nil
	} else if obj.AfterCommitMsgSuccess {
		return model.PorepStatusSuccess, nil
	} else if obj.AfterCommitMsg {
		return model.PorepStatusCommitMsgWait, nil
	} else if !obj.AfterFinalize && obj.TaskIDFinalize != nil {
		return model.PorepStatusClearCache, nil
	} else if !obj.AfterMoveStorage && obj.TaskIDMoveStorage != nil {
		return model.PorepStatusMoveStorage, nil
	} else if !obj.AfterPorep && obj.AfterPrecommitMsgSuccess {
		return model.PorepStatusPoRep, nil
	} else if !obj.AfterPrecommitMsgSuccess && obj.AfterPrecommitMsg {
		return model.PorepStatusPreCommitMsgWait, nil
	} else if !obj.AfterPrecommitMsg && obj.AfterSynth {
		return model.PorepStatusPreCommitMsg, nil
	} else if !obj.AfterSynth && obj.AfterTreeR {
		return model.PorepStatusSynthetic, nil
	} else if !obj.AfterTreeR && obj.AfterTreeD {
		return model.PorepStatusTreeRc, nil
	} else if !obj.AfterTreeD && obj.AfterTreeR {
		return model.PorepStatusTreeD, nil
	} else if !obj.AfterSdr {
		return model.PorepStatusSdr, nil
	} else {
		return model.PorepStatusUnknown, nil
	}
}

// CurrentTask is the resolver for the currentTask field.
func (r *porepResolver) CurrentTask(ctx context.Context, obj *model.Porep) (*model.Task, error) {
	status, err := r.Status(ctx, obj)
	if err != nil {
		return nil, err
	}
	var taskID *int
	switch status {
	case model.PorepStatusSdr:
		taskID = obj.TaskIDSdr
	case model.PorepStatusTreeD:
		taskID = obj.TaskIDTreeD
	case model.PorepStatusTreeRc:
		taskID = obj.TaskIDTreeC
	case model.PorepStatusSynthetic:
		taskID = obj.TaskIDSynth
	case model.PorepStatusPreCommitMsg:
		taskID = obj.TaskIDPrecommitMsg
	case model.PorepStatusPoRep:
		taskID = obj.TaskIDPorep
	case model.PorepStatusMoveStorage:
		taskID = obj.TaskIDMoveStorage
	case model.PorepStatusClearCache:
		taskID = obj.TaskIDFinalize
	case model.PorepStatusCommitMsgWait:
		taskID = obj.TaskIDCommitMsg
	}
	if taskID != nil {
		task, err := r.loader.Task(ctx, *taskID)
		if err != nil {
			log.Warnf("Failed to load task %d: %s", *taskID, err)
			return nil, nil
		}
		return task, nil
	}
	return nil, nil
}

// Porep returns graph.PorepResolver implementation.
func (r *Resolver) Porep() graph.PorepResolver { return &porepResolver{r} }

type porepResolver struct{ *Resolver }
