package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"

	"github.com/strahe/curio-dashboard/graph"
	"github.com/strahe/curio-dashboard/graph/model"
)

// InitiatedBy is the resolver for the initiatedBy field.
func (r *taskResolver) InitiatedBy(ctx context.Context, obj *model.Task) (*model.Machine, error) {
	if obj.InitiatedByID == nil {
		return nil, nil
	}
	var out model.Machine
	if err := r.db.QueryRow(ctx, "SELECT id,last_contact,host_and_port,cpu,gpu,ram FROM harmony_machines WHERE id = $1", obj.InitiatedByID).
		Scan(&out.ID, &out.LastContact, &out.HostAndPort, &out.CPU, &out.Gpu, &out.RAM); err != nil {
		return nil, err
	}
	return &out, nil
}

// Owner is the resolver for the owner field.
func (r *taskResolver) Owner(ctx context.Context, obj *model.Task) (*model.Machine, error) {
	if obj.OwnerID == nil {
		return nil, nil
	}
	var out model.Machine
	if err := r.db.QueryRow(ctx, "SELECT id,last_contact,host_and_port,cpu,gpu,ram FROM harmony_machines WHERE id = $1", obj.OwnerID).
		Scan(&out.ID, &out.LastContact, &out.HostAndPort, &out.CPU, &out.Gpu, &out.RAM); err != nil {
		return nil, err
	}
	return &out, nil
}

// AddedBy is the resolver for the addedBy field.
func (r *taskResolver) AddedBy(ctx context.Context, obj *model.Task) (*model.Machine, error) {
	var out model.Machine
	if err := r.db.QueryRow(ctx, "SELECT id,last_contact,host_and_port,cpu,gpu,ram FROM harmony_machines WHERE id = $1", obj.AddedByID).
		Scan(&out.ID, &out.LastContact, &out.HostAndPort, &out.CPU, &out.Gpu, &out.RAM); err != nil {
		return nil, err
	}
	return &out, nil
}

// PreviousTask is the resolver for the previousTask field.
func (r *taskResolver) PreviousTask(ctx context.Context, obj *model.Task) (*model.TaskHistory, error) {
	if obj.PreviousTaskID == nil {
		return nil, nil
	}
	var out model.TaskHistory
	if err := r.db.QueryRow(ctx, "SELECT id,task_id,name,posted,work_start,work_end, result, err FROM harmony_task_history WHERE task_id = $1", obj.PreviousTaskID).
		Scan(&out.ID, &out.TaskID, &out.Name, &out.Posted, &out.WorkStart, &out.WorkEnd, &out.Result, &out.Err); err != nil {
		return nil, err
	}
	return &out, nil
}

// Histories is the resolver for the histories field.
func (r *taskResolver) Histories(ctx context.Context, obj *model.Task) ([]*model.TaskHistory, error) {
	var out []*model.TaskHistory
	if err := r.db.Select(ctx, &out, "SELECT * FROM harmony_task_history WHERE task_id = $1", obj.ID); err != nil {
		return nil, err
	}
	return out, nil
}

// Task returns graph.TaskResolver implementation.
func (r *Resolver) Task() graph.TaskResolver { return &taskResolver{r} }

type taskResolver struct{ *Resolver }
