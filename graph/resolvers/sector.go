package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.55

import (
	"context"
	"errors"
	"fmt"

	"github.com/strahe/curio-dashboard/graph"
	"github.com/strahe/curio-dashboard/graph/cachecontrol"
	"github.com/strahe/curio-dashboard/graph/loaders"
	"github.com/strahe/curio-dashboard/graph/model"
)

// ID is the resolver for the id field.
func (r *sectorResolver) ID(ctx context.Context, obj *model.Sector) (string, error) {
	return fmt.Sprintf("%s:%d", obj.SpID, obj.SectorNum), nil
}

// Status is the resolver for the status field.
func (r *sectorResolver) Status(ctx context.Context, obj *model.Sector) (model.PorepStatus, error) {
	porep, err := r.loader.Porep(ctx, obj.SpID, obj.SectorNum)
	if err == nil {
		r := &porepResolver{r.Resolver}
		return r.Status(ctx, porep)
	}
	_, err = r.loader.SectorMeta(ctx, obj.SpID, obj.SectorNum)
	if err == nil {
		return model.PorepStatusActive, nil
	}
	return model.PorepStatusUnknown, nil
}

// Meta is the resolver for the meta field.
func (r *sectorResolver) Meta(ctx context.Context, obj *model.Sector) (*model.SectorMeta, error) {
	cachecontrol.SetHint(ctx, cachecontrol.ScopePrivate, sectorDefaultCacheAge)
	if obj.Meta != nil {
		return obj.Meta, nil
	}
	m, err := r.loader.SectorMeta(ctx, obj.SpID, obj.SectorNum)
	if errors.Is(err, loaders.ErrorNotFound) {
		return nil, nil
	}
	return m, nil
}

// Porep is the resolver for the porep field.
func (r *sectorResolver) Porep(ctx context.Context, obj *model.Sector) (*model.Porep, error) {
	cachecontrol.SetHint(ctx, cachecontrol.ScopePrivate, sectorDefaultCacheAge)
	return r.loader.Porep(ctx, obj.SpID, obj.SectorNum)
}

// Locations is the resolver for the locations field.
func (r *sectorResolver) Locations(ctx context.Context, obj *model.Sector) ([]*model.SectorLocation, error) {
	cachecontrol.SetHint(ctx, cachecontrol.ScopePrivate, sectorDefaultCacheAge)
	return r.loader.SectorLocations(ctx, obj.SpID, obj.SectorNum)
}

// Pieces is the resolver for the pieces field.
func (r *sectorResolver) Pieces(ctx context.Context, obj *model.Sector) ([]*model.SectorMetaPiece, error) {
	cachecontrol.SetHint(ctx, cachecontrol.ScopePrivate, sectorDefaultCacheAge)
	return r.loader.SectorPieces(ctx, obj.SpID, obj.SectorNum)
}

// Tasks is the resolver for the tasks field.
func (r *sectorResolver) Tasks(ctx context.Context, obj *model.Sector) ([]*model.Task, error) {
	cachecontrol.SetHint(ctx, cachecontrol.ScopePrivate, sectorDefaultCacheAge)
	return r.loader.SectorTasks(ctx, obj.SpID, obj.SectorNum)
}

// Events is the resolver for the events field.
func (r *sectorResolver) Events(ctx context.Context, obj *model.Sector) ([]*model.TaskHistory, error) {
	cachecontrol.SetHint(ctx, cachecontrol.ScopePrivate, sectorDefaultCacheAge)
	return r.loader.SectorEvents(ctx, obj.SpID, obj.SectorNum)
}

// IsPrimary is the resolver for the isPrimary field.
func (r *sectorLocationResolver) IsPrimary(ctx context.Context, obj *model.SectorLocation) (*bool, error) {
	return NullToPtr(obj.IsPrimary), nil
}

// ReadTs is the resolver for the readTs field.
func (r *sectorLocationResolver) ReadTs(ctx context.Context, obj *model.SectorLocation) (*string, error) {
	return NullToPtr(obj.ReadTS), nil
}

// WriteTs is the resolver for the writeTs field.
func (r *sectorLocationResolver) WriteTs(ctx context.Context, obj *model.SectorLocation) (*string, error) {
	return NullToPtr(obj.WriteTS), nil
}

// WriteLockOwner is the resolver for the writeLockOwner field.
func (r *sectorLocationResolver) WriteLockOwner(ctx context.Context, obj *model.SectorLocation) (*string, error) {
	return NullToPtr(obj.WriteLockOwner), nil
}

// Storage is the resolver for the storage field.
func (r *sectorLocationResolver) Storage(ctx context.Context, obj *model.SectorLocation) (*model.Storage, error) {
	return &model.Storage{ID: obj.StorageID}, nil
}

// Sector returns graph.SectorResolver implementation.
func (r *Resolver) Sector() graph.SectorResolver { return &sectorResolver{r} }

// SectorLocation returns graph.SectorLocationResolver implementation.
func (r *Resolver) SectorLocation() graph.SectorLocationResolver { return &sectorLocationResolver{r} }

type sectorResolver struct{ *Resolver }
type sectorLocationResolver struct{ *Resolver }
