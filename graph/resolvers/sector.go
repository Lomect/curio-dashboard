package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"fmt"
	"time"

	"github.com/strahe/curio-dashboard/graph"
	"github.com/strahe/curio-dashboard/graph/cachecontrol"
	"github.com/strahe/curio-dashboard/graph/model"
)

// ID is the resolver for the id field.
func (r *sectorResolver) ID(ctx context.Context, obj *model.Sector) (string, error) {
	return fmt.Sprintf("%d:%d", obj.SpID, obj.SectorNum), nil
}

// Locations is the resolver for the locations field.
func (r *sectorResolver) Locations(ctx context.Context, obj *model.Sector) ([]*model.SectorLocation, error) {
	cachecontrol.SetHint(ctx, cachecontrol.ScopePrivate, time.Minute*5)
	return r.loader.SectorLocations(ctx, obj.SpID, obj.SectorNum)
}

// Pieces is the resolver for the pieces field.
func (r *sectorResolver) Pieces(ctx context.Context, obj *model.Sector) ([]*model.SectorMetaPiece, error) {
	cachecontrol.SetHint(ctx, cachecontrol.ScopePrivate, time.Minute*5)
	return r.loader.SectorPieces(ctx, obj.SpID, obj.SectorNum)
}

// Tasks is the resolver for the tasks field.
func (r *sectorResolver) Tasks(ctx context.Context, obj *model.Sector) ([]*model.Task, error) {
	panic(fmt.Errorf("not implemented: Tasks - tasks"))
}

// Events is the resolver for the events field.
func (r *sectorResolver) Events(ctx context.Context, obj *model.Sector) ([]*model.TaskHistory, error) {
	cachecontrol.SetHint(ctx, cachecontrol.ScopePrivate, time.Minute)
	return r.loader.SectorEvents(ctx, obj.SpID, obj.SectorNum)
}

// Sector returns graph.SectorResolver implementation.
func (r *Resolver) Sector() graph.SectorResolver { return &sectorResolver{r} }

type sectorResolver struct{ *Resolver }
