package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.68

import (
	"context"
	"time"

	"github.com/web3tea/curio-dashboard/graph"
	"github.com/web3tea/curio-dashboard/graph/cachecontrol"
	"github.com/web3tea/curio-dashboard/graph/model"
)

// TotalAdvertisements is the resolver for the totalAdvertisements field.
func (r *iPNIStatsResolver) TotalAdvertisements(ctx context.Context, obj *model.IPNIStats) (int, error) {
	cachecontrol.SetHint(ctx, cachecontrol.ScopePrivate, time.Minute*5)
	return r.loader.IpniTotalAdvertisements(ctx)
}

// PreviousTotalAdvertisements is the resolver for the previousTotalAdvertisements field.
func (r *iPNIStatsResolver) PreviousTotalAdvertisements(ctx context.Context, obj *model.IPNIStats) (int, error) {
	cachecontrol.SetHint(ctx, cachecontrol.ScopePrivate, time.Minute*5)
	// todo: implement previous total advertisements
	// use the current advertisement count for now
	return r.loader.IpniTotalAdvertisements(ctx)
}

// Providers is the resolver for the providers field.
func (r *iPNIStatsResolver) Providers(ctx context.Context, obj *model.IPNIStats) (int, error) {
	cachecontrol.SetHint(ctx, cachecontrol.ScopePrivate, time.Minute*5)
	return r.loader.IpniTotalProviders(ctx)
}

// PreviousProviders is the resolver for the previousProviders field.
func (r *iPNIStatsResolver) PreviousProviders(ctx context.Context, obj *model.IPNIStats) (int, error) {
	cachecontrol.SetHint(ctx, cachecontrol.ScopePrivate, time.Minute*5)
	// todo: implement previous providers
	// use the current provider count for now
	return r.loader.IpniTotalProviders(ctx)
}

// Indexed is the resolver for the indexed field.
func (r *iPNIStatsResolver) Indexed(ctx context.Context, obj *model.IPNIStats) (int, error) {
	cachecontrol.SetHint(ctx, cachecontrol.ScopePrivate, time.Minute*5)
	return r.loader.IpniTotalIndexed(ctx)
}

// PreviousIndexed is the resolver for the previousIndexed field.
func (r *iPNIStatsResolver) PreviousIndexed(ctx context.Context, obj *model.IPNIStats) (int, error) {
	cachecontrol.SetHint(ctx, cachecontrol.ScopePrivate, time.Minute*5)
	// todo: implement previous indexed
	// use the current indexed count for now
	return r.loader.IpniTotalIndexed(ctx)
}

// Skipped is the resolver for the skipped field.
func (r *iPNIStatsResolver) Skipped(ctx context.Context, obj *model.IPNIStats) (int, error) {
	cachecontrol.SetHint(ctx, cachecontrol.ScopePrivate, time.Minute*5)
	return r.loader.IpniTotalSkipped(ctx)
}

// PreviousSkipped is the resolver for the previousSkipped field.
func (r *iPNIStatsResolver) PreviousSkipped(ctx context.Context, obj *model.IPNIStats) (int, error) {
	cachecontrol.SetHint(ctx, cachecontrol.ScopePrivate, time.Minute*5)
	// todo: implement previous skipped
	// use the current skipped count for now
	return r.loader.IpniTotalSkipped(ctx)
}

// PendingTasks is the resolver for the pendingTasks field.
func (r *iPNIStatsResolver) PendingTasks(ctx context.Context, obj *model.IPNIStats) (int, error) {
	cachecontrol.SetHint(ctx, cachecontrol.ScopePrivate, time.Minute*5)
	return r.loader.IpniPendingTasks(ctx)
}

// PreviousPendingTasks is the resolver for the previousPendingTasks field.
func (r *iPNIStatsResolver) PreviousPendingTasks(ctx context.Context, obj *model.IPNIStats) (int, error) {
	cachecontrol.SetHint(ctx, cachecontrol.ScopePrivate, time.Minute*5)
	// todo: implement previous pending tasks
	// use the current pending tasks count for now
	return r.loader.IpniPendingTasks(ctx)
}

// IpniStats is the resolver for the ipniStats field.
func (r *queryResolver) IpniStats(ctx context.Context) (*model.IPNIStats, error) {
	return &model.IPNIStats{}, nil
}

// IPNIStats returns graph.IPNIStatsResolver implementation.
func (r *Resolver) IPNIStats() graph.IPNIStatsResolver { return &iPNIStatsResolver{r} }

type iPNIStatsResolver struct{ *Resolver }
