package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.68

import (
	"context"
	"fmt"
	"time"

	"github.com/strahe/curio-dashboard/graph"
	"github.com/strahe/curio-dashboard/graph/cachecontrol"
	"github.com/strahe/curio-dashboard/graph/model"
	"github.com/strahe/curio-dashboard/types"
)

// Sdr is the resolver for the sdr field.
func (r *pipelineSummaryResolver) Sdr(ctx context.Context, obj *model.PipelineSummary) (int, error) {
	var out int
	err := r.db.QueryRow(ctx, "SELECT COUNT(*) FROM sectors_sdr_pipeline WHERE sp_id = $1 AND after_sdr = false", obj.ID).Scan(&out)
	return out, err
}

// Trees is the resolver for the trees field.
func (r *pipelineSummaryResolver) Trees(ctx context.Context, obj *model.PipelineSummary) (int, error) {
	var out int
	err := r.db.QueryRow(ctx, "SELECT COUNT(*) FROM sectors_sdr_pipeline WHERE sp_id = $1 AND (after_tree_d = false OR after_tree_c = false OR after_tree_r = false) AND after_sdr = true", obj.ID).Scan(&out)
	return out, err
}

// PrecommitMsg is the resolver for the precommitMsg field.
func (r *pipelineSummaryResolver) PrecommitMsg(ctx context.Context, obj *model.PipelineSummary) (int, error) {
	var out int
	err := r.db.QueryRow(ctx, "SELECT COUNT(*) FROM sectors_sdr_pipeline WHERE sp_id = $1 AND after_tree_r = true and after_precommit_msg = false", obj.ID).Scan(&out)
	return out, err
}

// WaitSeed is the resolver for the waitSeed field.
func (r *pipelineSummaryResolver) WaitSeed(ctx context.Context, obj *model.PipelineSummary) (int, error) {
	head, err := r.fullNode.ChainHead(ctx)
	if err != nil {
		return 0, err
	}
	var out int
	err = r.db.QueryRow(ctx, "SELECT COUNT(*) FROM sectors_sdr_pipeline WHERE sp_id = $1 AND after_precommit_msg_success = true AND seed_epoch > $2", obj.ID, head.Height()).Scan(&out)
	return out, err
}

// Porep is the resolver for the porep field.
func (r *pipelineSummaryResolver) Porep(ctx context.Context, obj *model.PipelineSummary) (int, error) {
	var out int
	err := r.db.QueryRow(ctx, "SELECT COUNT(*) FROM sectors_sdr_pipeline WHERE sp_id = $1 AND after_porep = false AND after_precommit_msg_success = true", obj.ID).Scan(&out)
	return out, err
}

// CommitMsg is the resolver for the commitMsg field.
func (r *pipelineSummaryResolver) CommitMsg(ctx context.Context, obj *model.PipelineSummary) (int, error) {
	var out int
	err := r.db.QueryRow(ctx, "SELECT COUNT(*) FROM sectors_sdr_pipeline WHERE sp_id = $1 AND after_commit_msg_success = false AND after_porep = true", obj.ID).Scan(&out)
	return out, err
}

// Done is the resolver for the done field.
func (r *pipelineSummaryResolver) Done(ctx context.Context, obj *model.PipelineSummary) (int, error) {
	var out int
	err := r.db.QueryRow(ctx, "SELECT COUNT(*) FROM sectors_sdr_pipeline WHERE sp_id = $1 AND after_commit_msg_success = true", obj.ID).Scan(&out)
	return out, err
}

// Failed is the resolver for the failed field.
func (r *pipelineSummaryResolver) Failed(ctx context.Context, obj *model.PipelineSummary) (int, error) {
	var out int
	err := r.db.QueryRow(ctx, "SELECT COUNT(*) FROM sectors_sdr_pipeline WHERE sp_id = $1 AND failed = true", obj.ID).Scan(&out)
	return out, err
}

// ID is the resolver for the id field.
func (r *porepResolver) ID(ctx context.Context, obj *model.Porep) (string, error) {
	return fmt.Sprintf("%s-%d", obj.SpID, obj.SectorNumber), nil
}

// Status is the resolver for the status field.
func (r *porepResolver) Status(ctx context.Context, obj *model.Porep) (model.PorepStatus, error) {
	if obj.Failed {
		return model.PorepStatusFailed, nil
	} else if obj.AfterCommitMsgSuccess {
		return model.PorepStatusSuccess, nil
	} else if obj.AfterCommitMsg {
		return model.PorepStatusCommitMsgWait, nil
	} else if !obj.AfterFinalize && obj.TaskIDFinalize != nil {
		return model.PorepStatusClearCache, nil
	} else if !obj.AfterMoveStorage && obj.TaskIDMoveStorage != nil {
		return model.PorepStatusMoveStorage, nil
	} else if !obj.AfterPorep && obj.AfterPrecommitMsgSuccess {
		return model.PorepStatusPoRep, nil
	} else if !obj.AfterPrecommitMsgSuccess && obj.AfterPrecommitMsg {
		return model.PorepStatusPreCommitMsgWait, nil
	} else if !obj.AfterPrecommitMsg && obj.AfterSynth {
		return model.PorepStatusPreCommitMsg, nil
	} else if !obj.AfterSynth && obj.AfterTreeR {
		return model.PorepStatusSynthetic, nil
	} else if !obj.AfterTreeR && obj.AfterTreeD {
		return model.PorepStatusTreeRc, nil
	} else if !obj.AfterTreeD && obj.AfterTreeR {
		return model.PorepStatusTreeD, nil
	} else if !obj.AfterSdr {
		return model.PorepStatusSdr, nil
	} else {
		return model.PorepStatusUnknown, nil
	}
}

// CurrentTask is the resolver for the currentTask field.
func (r *porepResolver) CurrentTask(ctx context.Context, obj *model.Porep) (*model.Task, error) {
	status, err := r.Status(ctx, obj)
	if err != nil {
		return nil, err
	}
	var taskID *int
	switch status {
	case model.PorepStatusSdr:
		taskID = obj.TaskIDSdr
	case model.PorepStatusTreeD:
		taskID = obj.TaskIDTreeD
	case model.PorepStatusTreeRc:
		taskID = obj.TaskIDTreeC
	case model.PorepStatusSynthetic:
		taskID = obj.TaskIDSynth
	case model.PorepStatusPreCommitMsg:
		taskID = obj.TaskIDPrecommitMsg
	case model.PorepStatusPoRep:
		taskID = obj.TaskIDPorep
	case model.PorepStatusMoveStorage:
		taskID = obj.TaskIDMoveStorage
	case model.PorepStatusClearCache:
		taskID = obj.TaskIDFinalize
	case model.PorepStatusCommitMsgWait:
		taskID = obj.TaskIDCommitMsg
	}
	if taskID != nil {
		task, err := r.loader.Task(ctx, *taskID)
		if err != nil {
			log.Warnf("Failed to load task %d: %s", *taskID, err)
			return nil, nil
		}
		return task, nil
	}
	return nil, nil
}

// Poreps is the resolver for the poreps field.
func (r *queryResolver) Poreps(ctx context.Context) ([]*model.Porep, error) {
	cachecontrol.SetHint(ctx, cachecontrol.ScopePrivate, time.Minute*5)
	return r.loader.Poreps(ctx)
}

// Porep is the resolver for the porep field.
func (r *queryResolver) Porep(ctx context.Context, sp types.Address, sectorNumber int) (*model.Porep, error) {
	return r.loader.Porep(ctx, sp, sectorNumber)
}

// PipelinesSummary is the resolver for the pipelinesSummary field.
func (r *queryResolver) PipelinesSummary(ctx context.Context) ([]*model.PipelineSummary, error) {
	cachecontrol.SetHint(ctx, cachecontrol.ScopePrivate, time.Minute*5)
	return r.loader.PipelinesSummary(ctx)
}

// PipelineSummary returns graph.PipelineSummaryResolver implementation.
func (r *Resolver) PipelineSummary() graph.PipelineSummaryResolver {
	return &pipelineSummaryResolver{r}
}

// Porep returns graph.PorepResolver implementation.
func (r *Resolver) Porep() graph.PorepResolver { return &porepResolver{r} }

type pipelineSummaryResolver struct{ *Resolver }
type porepResolver struct{ *Resolver }
