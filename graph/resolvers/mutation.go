package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.55

import (
	"context"
	"errors"
	"fmt"

	"github.com/strahe/curio-dashboard/graph"
	"github.com/strahe/curio-dashboard/graph/model"
	"github.com/strahe/curio-dashboard/types"
	pgx "github.com/yugabyte/pgx/v5"
)

// CreateConfig is the resolver for the createConfig field.
func (r *mutationResolver) CreateConfig(ctx context.Context, title string, config string) (*model.Config, error) {
	_, err := r.loader.Config(ctx, title)
	if !errors.Is(err, pgx.ErrNoRows) {
		return nil, fmt.Errorf("config %s already exists", title)
	}
	if title == "" || config == "" {
		return nil, fmt.Errorf("title and config must be non-empty")
	}
	_, err = r.db.Exec(ctx, "INSERT INTO harmony_config (title, config) VALUES ($1, $2)", title, config)
	if err != nil {
		return nil, err
	}
	return r.loader.Config(ctx, title)
}

// UpdateConfig is the resolver for the updateConfig field.
func (r *mutationResolver) UpdateConfig(ctx context.Context, title string, config string) (*model.Config, error) {
	c, err := r.loader.Config(ctx, title)
	if err != nil {
		return nil, err
	}
	_, err = r.db.Exec(ctx, "UPDATE harmony_config SET config = $1 WHERE title = $2", config, title)
	if err != nil {
		return nil, err
	}
	c.Config = config
	return c, nil
}

// RemoveConfig is the resolver for the removeConfig field.
func (r *mutationResolver) RemoveConfig(ctx context.Context, title string) (*model.Config, error) {
	machines, err := r.loader.ConfigUsed(ctx, title)
	if err != nil {
		return nil, err
	}
	if len(machines) > 0 {
		return nil, fmt.Errorf("config %s is used by %d machines", title, len(machines))
	}

	cfg, err := r.loader.Config(ctx, title)
	if err != nil {
		return nil, err
	}

	ct, err := r.db.Exec(ctx, "DELETE FROM harmony_config WHERE title = $1", title)
	if err != nil {
		return nil, err
	}
	if ct == 0 {
		return nil, fmt.Errorf("config %s not found", title)
	}
	return cfg, nil
}

// RemoveSector is the resolver for the removeSector field.
func (r *mutationResolver) RemoveSector(ctx context.Context, miner types.Address, sectorNumber int) (bool, error) {
	if err := r.curioAPI.SectorRemove(ctx, int(miner.ID), sectorNumber); err != nil {
		return false, err
	}
	return true, nil
}

// RestartSector is the resolver for the restartSector field.
func (r *mutationResolver) RestartSector(ctx context.Context, miner types.Address, sectorNumber int) (bool, error) {
	if err := r.curioAPI.SectorResume(ctx, int64(miner.ID), int64(sectorNumber)); err != nil {
		return false, err
	}
	return true, nil
}

// RestartAllFailedSectors is the resolver for the restartAllFailedSectors field.
func (r *mutationResolver) RestartAllFailedSectors(ctx context.Context) (bool, error) {
	err := r.curioAPI.PipelinePorepRestartAll(ctx)
	if err != nil {
		return false, err
	}
	return true, err
}

// DealSealNow is the resolver for the dealSealNow field.
func (r *mutationResolver) DealSealNow(ctx context.Context, miner types.Address, sectorNumber uint64) (bool, error) {
	err := r.curioAPI.DealsSealNow(ctx, uint64(miner.ID), sectorNumber)
	if err != nil {
		return false, err
	}
	return true, nil
}

// Mutation returns graph.MutationResolver implementation.
func (r *Resolver) Mutation() graph.MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
