package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"errors"
	"fmt"

	"github.com/strahe/curio-dashboard/graph"
	"github.com/strahe/curio-dashboard/graph/model"
	pgx "github.com/yugabyte/pgx/v5"
)

// CreateConfig is the resolver for the createConfig field.
func (r *mutationResolver) CreateConfig(ctx context.Context, title string, config string) (*model.Config, error) {
	_, err := r.loader.Config(ctx, title)
	if !errors.Is(err, pgx.ErrNoRows) {
		return nil, fmt.Errorf("config %s already exists", title)
	}
	if title == "" || config == "" {
		return nil, fmt.Errorf("title and config must be non-empty")
	}
	_, err = r.db.Exec(ctx, "INSERT INTO harmony_config (title, config) VALUES ($1, $2)", title, config)
	if err != nil {
		return nil, err
	}
	return r.loader.Config(ctx, title)
}

// UpdateConfig is the resolver for the updateConfig field.
func (r *mutationResolver) UpdateConfig(ctx context.Context, title string, config string) (*model.Config, error) {
	c, err := r.loader.Config(ctx, title)
	if err != nil {
		return nil, err
	}
	_, err = r.db.Exec(ctx, "UPDATE harmony_config SET config = $1 WHERE title = $2", config, title)
	if err != nil {
		return nil, err
	}
	c.Config = config
	return c, nil
}

// Mutation returns graph.MutationResolver implementation.
func (r *Resolver) Mutation() graph.MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
