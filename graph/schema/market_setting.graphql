type PriceFilter {
  name: String!
  minDurationDays: Int!
  maxDurationDays: Int!
  minimumSize: Int!
  maximumSize: Int!
  price: Int!
  verified: Boolean!
}

type ClientFilter {
  name: String!
  active: Boolean!
  wallets: [Address!]!
  peers: [PeerID!]!
  pricingFilters: [String!]!
  maxDealsPerHour: Int!
  maxDealSizePerHour: Int!
  info: String!
}

extend type Query {
  makretPriceFilters: [PriceFilter!]
  marketPriceFilter(name: String!): PriceFilter
  marketCheckPriceFilter(name: String!): Boolean!
  marketClientFilters: [ClientFilter!]
  marketClientFilter(name: String!): ClientFilter
  marketCheckClientFilter(name: String!): Boolean!
}

input PriceFilterInput {
  name: String!
  minDurationDays: Int!
  maxDurationDays: Int!
  minimumSize: Int!
  maximumSize: Int!
  price: Int!
  verified: Boolean!
}

input ClientFilterInput {
  name: String!
  active: Boolean!
  wallets: [Address!]!
  peers: [PeerID!]!
  pricingFilters: [String!]!
  maxDealsPerHour: Int!
  maxDealSizePerHour: Int!
  info: String!
}

extend type Mutation {
  marketAddPriceFilter(input: PriceFilterInput!): Boolean!
  marketUpdatePriceFilter(input: PriceFilterInput!): PriceFilter
  marketDeletePriceFilter(name: String!): Boolean!
  marketAddClientFilter(input: ClientFilterInput!): Boolean!
  marketUpdateClientFilter(input: ClientFilterInput!): ClientFilter
  marketDeleteClientFilter(name: String!): Boolean!
  marketToggleClientFilter(name: String!): Boolean!
}
