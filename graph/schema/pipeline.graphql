type PipelineSummary {
    id: Address!
    sdr: Int!
    trees: Int!
    precommitMsg: Int!
    waitSeed: Int!
    porep: Int!
    commitMsg: Int!
    done: Int!
    failed: Int!
}

type Porep {
    id: ID!
    spId: Address!
    sectorNumber: Int!
    createTime: Time!
    regSealProof: Int!
    ticketEpoch: Int
    ticketValue: Bytes
    taskIdSdr: Int
    afterSdr: Boolean!
    treeDCid: String
    taskIdTreeD: Int
    afterTreeD: Boolean!
    taskIdTreeC: Int
    afterTreeC: Boolean!
    treeRCid: String
    taskIdTreeR: Int
    afterTreeR: Boolean!
    precommitMsgCid: String
    taskIdPrecommitMsg: Int
    afterPrecommitMsg: Boolean!
    seedEpoch: Int
    precommitMsgTsk: Bytes
    afterPrecommitMsgSuccess: Boolean!
    seedValue: Bytes
    taskIdPorep: Int
    porepProof: Bytes
    afterPorep: Boolean!
    taskIdFinalize: Int
    afterFinalize: Boolean!
    taskIdMoveStorage: Int
    afterMoveStorage: Boolean!
    commitMsgCid: String
    taskIdCommitMsg: Int
    afterCommitMsg: Boolean!
    commitMsgTsk: Bytes
    afterCommitMsgSuccess: Boolean!
    failed: Boolean!
    failedAt: Time
    failedReason: String!
    failedReasonMsg: String!
    taskIdSynth: Int
    afterSynth: Boolean!
    userSectorDurationEpochs: Int

    status: PorepStatus!
    currentTask: Task
}

enum PorepStatus {
    SDR
    TreeD
    TreeRC
    Synthetic
    PreCommitMsg
    PreCommitMsgWait
    WaitSeed
    PoRep
    ClearCache
    MoveStorage
    CommitMsg
    CommitMsgWait
    Failed
    Success
    OnChain
    Active
    Unknown
}

extend type Query {
    poreps: [Porep]
    porep(sp: Address!, sectorNumber: Int!): Porep
    pipelinesSummary: [PipelineSummary]
}
