type Sector {
    id: ID!
    spID: Address!
    sectorNum: Int!
    status: TaskStatus!
    meta: SectorMeta
    porep: Porep
    locations: [SectorLocation]!
    pieces: [SectorMetaPiece]!
    tasks: [Task]!
    events: [TaskHistory]!
}

type SectorMeta {
    id: String!
    spId: Address!
    sectorNum: Int!
    regSealProof: Int!
    ticketEpoch: Int!
    ticketValue: Bytes
    origSealedCid: String!
    origUnsealedCid: String!
    curSealedCid: String!
    curUnsealedCid: String!
    msgCidPrecommit: String
    msgCidCommit: String
    msgCidUpdate: String
    seedEpoch: Int!
    seedValue: Bytes
    expirationEpoch: Int
    isCC: Boolean!
}

type OpenSectorPiece {
    spID: Address!
    sectorNumber: Int!
    pieceIndex: Int!
    pieceCID: String!
    pieceSize: Int!
    dataURL: String!
    dataHeaders: JSON!
    dataRawSize: Int!
    dataDeleteOnFinalize: Boolean!
    f05PublishCID: String
    f05DealID: Int
    f05DealProposal: JSON
    f05DealStartEpoch: Int
    f05DealEndEpoch: Int
    directStartEpoch: Int
    directEndEpoch: Int
    directPieceActivationManifest: JSON
    createdAt: Time!
    isSnap: Boolean!
}

type SectorLocation {
    minerId: Address!
    sectorNum: Int!
    sectorFiletype: Int!
    storageId: String!
    isPrimary: Boolean
    readTs: String
    readRefs: Int!
    writeTs: String
    writeLockOwner: String
    storage: Storage
}

type SectorMetaPiece {
    spID: Address!
    sectorNum: Int!
    pieceNum: Int!
    pieceCID: String!
    pieceSize: Int!
    requestedKeepData: Boolean!
    rawDataSize: Int
    startEpoch: Int
    origEndEpoch: Int
    f05DealID: Int
    ddoPam: JSON
    f05DealProposal: JSON
}

type SectorSummary {
    active: Int!
    sealing: Int!
    failed: Int!
}

extend type Query {
    sectors(actor: Address, sectorNumber: Int, offset: Int!, limit: Int!): [Sector]
    sectorsCount(actor: Address): Int!
    sector(actor: Address!, sectorNumber: Int!): Sector
    sectorSummary: SectorSummary
}

extend type Mutation {
    removeSector(miner: Address!, sectorNumber: Int!): Boolean!
    restartSector(miner: Address!, sectorNumber: Int!): Boolean!
    restartAllFailedSectors: Boolean!
}
